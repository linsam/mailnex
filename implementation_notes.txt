Some of the design decisions made:

    * use of cmd module instead of custom. This module mostly does what I
      would have done anyway, with a few inconveniences I can overlook in the
      interest of saving time.
    
    * prompt_toolkit: Python's readline interface is pretty rudimentary. A lot of
      the medium to advanced functionality isn't available. prompt_toolkit is
      readline-like enough and allows me (with some effort) to use my own
      eventloop.

    * Threads vs. eventloop. I much prefer eventloops. It keeps things fairly
      simple. Resource locking is usually not needed and passing info from
      one part of the program to another is a snap. However, many python
      libraries don't support this style. They want to be blockers or their
      own event loops. I might be able to fake it with imaplib by overriding
      the I/O functions. Readline is a breaker though. The bindings appear to
      be C functions. I cannot override that, and they didn't provide the
      injection functions one would need to implement it.

    * libuv: pretty full-featured event loop.
    
    * imaplib: Python's built-in library for imap interaction is a bit painful
      to use. It does partial processing of data making it hard to properly
      parse correctly after-the-fact (you'd either want full processing or no
      processing). Obscures some parts of the protocol so you can't take
      advantage of it (such as some of the round-trip saving messages on box
      selection). Some people have written wrappers around it to smooth some
      of the edges. I chose to write my own so that I can take advantage of
      the protocol better.

    * xapian: First search engine I tried for this project. So far it works
      well enough that I haven't invested time looking at others.
